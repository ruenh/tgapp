"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
"""
import random
import asyncio
import logging
from datetime import datetime
from typing import List, Dict, Any
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from aiogram import Bot

from bot.utils.db import db
from bot.config import TIMEZONE

logger = logging.getLogger(__name__)

class DrawScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        self.scheduler.add_job(
            self.check_draws,
            trigger=IntervalTrigger(minutes=1),
            id="check_draws",
            replace_existing=True
        )
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_draws(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"""
        try:
            active_draws = await db.get_active_draws()
            now = datetime.now()
            
            for draw in active_draws:
                end_date = datetime.fromisoformat(draw["end_date"])
                
                if now >= end_date:
                    logger.info(f"–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à {draw['id']}")
                    await self.complete_draw(draw)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {e}")
    
    async def complete_draw(self, draw: Dict[str, Any]):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
        draw_id = draw["id"]
        
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await db.get_participants(draw_id)
            
            if not participants:
                logger.warning(f"–†–æ–∑—ã–≥—Ä—ã—à {draw_id} –Ω–µ –∏–º–µ–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                await db.update_draw_status(draw_id, "completed")
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                first_channel = draw["channels"][0]["username"]
                await self.bot.send_message(
                    chat_id=first_channel,
                    text=f"üéâ –†–æ–∑—ã–≥—Ä—ã—à \"{draw['title']}\" –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                         f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –±—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
                    parse_mode="Markdown"
                )
                return
            
            # –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            winners_count = min(draw["winners_count"], len(participants))
            winners = random.sample(participants, winners_count)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –ë–î
            await db.add_winners(draw_id, winners)
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            await db.update_draw_status(draw_id, "completed")
            
            # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
            winners_text = self.format_winners_message(draw, winners)
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª
            first_channel = draw["channels"][0]["username"]
            await self.bot.send_message(
                chat_id=first_channel,
                text=winners_text,
                parse_mode="Markdown"
            )
            
            logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à {draw_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {len(winners)}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {draw_id}: {e}")
    
    def format_winners_message(self, draw: Dict[str, Any], winners: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏"""
        text = f"üèÜ **–†–æ–∑—ã–≥—Ä—ã—à \"{draw['title']}\" –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        text += f"üéÅ **–ü—Ä–∏–∑—ã:**\n{draw['prizes']}\n\n"
        text += f"üéâ **–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:**\n\n"
        
        for i, winner in enumerate(winners, 1):
            name = winner["first_name"]
            username = winner.get("username")
            
            if username:
                # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                text += f"{i}. [{name}](https://t.me/{username})\n"
            else:
                # –ü—Ä–æ—Å—Ç–æ –∏–º—è –±–µ–∑ —Å—Å—ã–ª–∫–∏
                text += f"{i}. {name}\n"
        
        text += "\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
        
        return text

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.py)
scheduler: DrawScheduler = None

def init_scheduler(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    global scheduler
    scheduler = DrawScheduler(bot)
    return scheduler
