"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (FSM)
"""
import re
from datetime import datetime
from typing import Dict, Any
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from bot.utils.db import db
from bot.utils.checks import check_channel_requirements
from bot.keyboards.inline import (
    get_conditions_keyboard,
    get_retry_keyboard,
    get_more_channels_keyboard,
    get_confirm_keyboard,
    get_participate_keyboard
)

router = Router()

class CreateDrawForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    waiting_for_title = State()
    waiting_for_prizes = State()
    waiting_for_winners_count = State()
    waiting_for_conditions = State()
    waiting_for_channel = State()
    checking_channel = State()
    waiting_for_more_channels = State()
    waiting_for_end_date = State()
    confirming = State()

@router.callback_query(F.data == "create_draw")
async def start_create_draw(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await callback.answer()
    await state.set_state(CreateDrawForm.waiting_for_title)
    
    await callback.message.answer(
        "üìù **–®–∞–≥ 1/6: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:",
        parse_mode="Markdown"
    )

@router.message(CreateDrawForm.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    await state.update_data(title=message.text)
    await state.set_state(CreateDrawForm.waiting_for_prizes)
    
    await message.answer(
        "üéÅ **–®–∞–≥ 2/6: –ü—Ä–∏–∑—ã**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. iPhone 15 Pro\n"
        "2. AirPods Pro\n"
        "3. –ü–æ–¥–ø–∏—Å–∫–∞ Premium",
        parse_mode="Markdown"
    )

@router.message(CreateDrawForm.waiting_for_prizes)
async def process_prizes(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤"""
    await state.update_data(prizes=message.text)
    await state.set_state(CreateDrawForm.waiting_for_winners_count)
    
    await message.answer(
        "üèÜ **–®–∞–≥ 3/6: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—á–∏—Å–ª–æ):",
        parse_mode="Markdown"
    )

@router.message(CreateDrawForm.waiting_for_winners_count)
async def process_winners_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
    try:
        winners_count = int(message.text)
        if winners_count < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
        
        await state.update_data(winners_count=winners_count)
        await state.set_state(CreateDrawForm.waiting_for_conditions)
        
        await message.answer(
            "‚úÖ **–®–∞–≥ 4/6: –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è:",
            reply_markup=get_conditions_keyboard(),
            parse_mode="Markdown"
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

@router.callback_query(F.data == "condition_subscription", CreateDrawForm.waiting_for_conditions)
async def process_conditions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏–π"""
    await callback.answer()
    await state.update_data(channels=[])
    await state.set_state(CreateDrawForm.waiting_for_channel)
    
    await callback.message.answer(
        "üì¢ **–®–∞–≥ 5/6: –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: @channelname –∏–ª–∏ https://t.me/channelname):",
        parse_mode="Markdown"
    )

@router.message(CreateDrawForm.waiting_for_channel)
async def process_channel(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞"""
    channel_input = message.text.strip()
    
    # –ò–∑–≤–ª–µ—á—å username –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    if channel_input.startswith("@"):
        channel_username = channel_input
    elif "t.me/" in channel_input:
        channel_username = "@" + channel_input.split("t.me/")[-1].strip("/")
    else:
        channel_username = "@" + channel_input
    
    await state.update_data(current_channel=channel_username)
    await state.set_state(CreateDrawForm.checking_channel)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
    checking_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª...")
    
    user_subscribed, bot_is_admin = await check_channel_requirements(
        bot, message.from_user.id, channel_username
    )
    
    if not user_subscribed:
        await checking_msg.edit_text(
            f"‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel_username}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_retry_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    if not bot_is_admin:
        await checking_msg.edit_text(
            f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {channel_username}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏:\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_retry_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    data = await state.get_data()
    channels = data.get("channels", [])
    channels.append({
        "username": channel_username,
        "is_verified": True
    })
    await state.update_data(channels=channels)
    
    await checking_msg.edit_text(
        f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}",
        parse_mode="Markdown"
    )
    
    await state.set_state(CreateDrawForm.waiting_for_more_channels)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª?",
        reply_markup=get_more_channels_keyboard()
    )

@router.callback_query(F.data == "retry_check", CreateDrawForm.checking_channel)
async def retry_channel_check(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞"""
    await callback.answer()
    data = await state.get_data()
    channel_username = data.get("current_channel")
    
    checking_msg = await callback.message.edit_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª —Å–Ω–æ–≤–∞...")
    
    user_subscribed, bot_is_admin = await check_channel_requirements(
        bot, callback.from_user.id, channel_username
    )
    
    if not user_subscribed:
        await checking_msg.edit_text(
            f"‚ùå –í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel_username}",
            reply_markup=get_retry_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    if not bot_is_admin:
        await checking_msg.edit_text(
            f"‚ùå –ë–æ—Ç –≤—Å–µ –µ—â–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {channel_username}",
            reply_markup=get_retry_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    data = await state.get_data()
    channels = data.get("channels", [])
    channels.append({
        "username": channel_username,
        "is_verified": True
    })
    await state.update_data(channels=channels)
    
    await checking_msg.edit_text(
        f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}",
        parse_mode="Markdown"
    )
    
    await state.set_state(CreateDrawForm.waiting_for_more_channels)
    await callback.message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª?",
        reply_markup=get_more_channels_keyboard()
    )

@router.callback_query(F.data == "add_channel", CreateDrawForm.waiting_for_more_channels)
async def add_another_channel(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"""
    await callback.answer()
    await state.set_state(CreateDrawForm.waiting_for_channel)
    
    await callback.message.answer(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ username —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞:",
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "finish_channels", CreateDrawForm.waiting_for_more_channels)
async def finish_channels(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
    await callback.answer()
    await state.set_state(CreateDrawForm.waiting_for_end_date)
    
    await callback.message.answer(
        "üìÖ **–®–∞–≥ 6/6: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
        "–ü—Ä–∏–º–µ—Ä: 31.12.2025 23:59",
        parse_mode="Markdown"
    )

@router.message(CreateDrawForm.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
        end_date = datetime.strptime(message.text.strip(), "%d.%m.%Y %H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if end_date <= datetime.now():
            await message.answer(
                "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="Markdown"
            )
            return
        
        await state.update_data(end_date=end_date)
        await state.set_state(CreateDrawForm.confirming)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = await state.get_data()
        preview_text = format_draw_message(data)
        
        await message.answer(
            "‚úÖ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞:**\n\n" + preview_text,
            reply_markup=get_confirm_keyboard(),
            parse_mode="Markdown"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2025 23:59",
            parse_mode="Markdown"
        )

def format_draw_message(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
    title = data["title"]
    prizes = data["prizes"]
    winners_count = data["winners_count"]
    channels = data["channels"]
    end_date = data["end_date"]
    
    text = f"üéâ **{title}**\n\n"
    text += f"üéÅ **–ü—Ä–∏–∑—ã:**\n{prizes}\n\n"
    text += f"‚úÖ **–£—Å–ª–æ–≤–∏—è:**\n"
    
    for channel in channels:
        text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel['username']}\n"
    
    text += f"\nüìÖ **–ò—Ç–æ–≥–∏:** {end_date.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:** {winners_count}"
    
    return text

@router.callback_query(F.data == "confirm_create", CreateDrawForm.confirming)
async def confirm_create(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await callback.answer()
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –ë–î
    draw_id = await db.create_draw(
        owner_id=callback.from_user.id,
        title=data["title"],
        prizes=data["prizes"],
        winners_count=data["winners_count"],
        channels=data["channels"],
        end_date=data["end_date"]
    )
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
    first_channel = data["channels"][0]["username"]
    draw_text = format_draw_message(data) + "\n\nüëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    try:
        sent_message = await bot.send_message(
            chat_id=first_channel,
            text=draw_text,
            reply_markup=get_participate_keyboard(draw_id),
            parse_mode="Markdown"
        )
        
        await callback.message.answer(
            f"‚úÖ **–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞: `{draw_id}`\n"
            f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤: {first_channel}\n\n"
            f"–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {data['end_date'].strftime('%d.%m.%Y –≤ %H:%M')}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª:\n{str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ."
        )
    
    await state.clear()

@router.callback_query(F.data == "cancel_create", CreateDrawForm.confirming)
async def cancel_create(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await callback.answer()
    await state.clear()
    
    await callback.message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        parse_mode="Markdown"
    )

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return
    
    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        parse_mode="Markdown"
    )
